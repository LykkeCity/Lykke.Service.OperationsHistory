// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.OperationsHistory.AutorestClient
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface IOperationsHistoryAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


        /// <summary>
        /// Checks service is alive
        /// </summary>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IsAliveResponse>> IsAliveWithHttpMessagesAsync(Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Getting history by clientId
        /// </summary>
        /// <param name='clientId'>
        /// Client identifier
        /// </param>
        /// <param name='take'>
        /// How many maximum items have to be returned
        /// </param>
        /// <param name='skip'>
        /// How many items skip before returning
        /// </param>
        /// <param name='operationTypes'>
        /// The type of the operation, possible values: CashIn, CashOut, Trade
        /// </param>
        /// <param name='assetId'>
        /// Asset identifier
        /// </param>
        /// <param name='assetPairId'>
        /// AssetPair identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetByClientIdWithHttpMessagesAsync(string clientId, int take, int skip, IList<string> operationTypes = default(IList<string>), string assetId = default(string), string assetPairId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Getting history by date range, note: internal cache is not used
        /// here
        /// </summary>
        /// <param name='dateFrom'>
        /// The date of the operation will be equal or greater than
        /// </param>
        /// <param name='dateTo'>
        /// The date of the operation will be less than
        /// </param>
        /// <param name='operationType'>
        /// The type of the operation, possible values: CashIn, CashOut, Trade.
        /// Possible values include: 'CashIn', 'CashOut', 'Trade',
        /// 'LimitTrade', 'LimitOrderEvent'
        /// </param>
        /// <param name='assetId'>
        /// Id of the asset
        /// </param>
        /// <param name='assetPairId'>
        /// AssetPair identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetByDatesWithHttpMessagesAsync(System.DateTime dateFrom, System.DateTime dateTo, HistoryOperationType? operationType = default(HistoryOperationType?), string assetId = default(string), string assetPairId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Getting history by wallet identifier
        /// </summary>
        /// <param name='walletId'>
        /// Wallet identifier
        /// </param>
        /// <param name='take'>
        /// How many maximum items have to be returned
        /// </param>
        /// <param name='skip'>
        /// How many items skip before returning
        /// </param>
        /// <param name='operationTypes'>
        /// The type of the operation, possible values: CashIn, CashOut, Trade
        /// </param>
        /// <param name='assetId'>
        /// Asset identifier
        /// </param>
        /// <param name='assetPairId'>
        /// AssetPair identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetByWalletIdWithHttpMessagesAsync(string walletId, int take, int skip, IList<string> operationTypes = default(IList<string>), string assetId = default(string), string assetPairId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Getting history record by operation id
        /// </summary>
        /// <param name='walletId'>
        /// Wallet identifier
        /// </param>
        /// <param name='operationId'>
        /// Operation identifier
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<HistoryOperation>> GetByOperationIdWithHttpMessagesAsync(string walletId, string operationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='clientId'>
        /// </param>
        /// <param name='operationId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<HistoryOperation>> ApiOperationsHistoryClientByClientIdOperationByOperationIdDeleteWithHttpMessagesAsync(string clientId, string operationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
