// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.OperationsHistory.AutorestClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class HistoryOperation
    {
        /// <summary>
        /// Initializes a new instance of the HistoryOperation class.
        /// </summary>
        public HistoryOperation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HistoryOperation class.
        /// </summary>
        public HistoryOperation(System.DateTime dateTime, string id = default(string), CashInHistoryOperation cashIn = default(CashInHistoryOperation), CashOutHistoryOperation cashOut = default(CashOutHistoryOperation), TradeHistoryOperation trade = default(TradeHistoryOperation))
        {
            Id = id;
            DateTime = dateTime;
            CashIn = cashIn;
            CashOut = cashOut;
            Trade = trade;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DateTime")]
        public System.DateTime DateTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CashIn")]
        public CashInHistoryOperation CashIn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CashOut")]
        public CashOutHistoryOperation CashOut { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Trade")]
        public TradeHistoryOperation Trade { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CashIn != null)
            {
                CashIn.Validate();
            }
            if (CashOut != null)
            {
                CashOut.Validate();
            }
            if (Trade != null)
            {
                Trade.Validate();
            }
        }
    }
}
